#!/usr/bin/python3

"""
BowtieEd - An LED Bowtie Matrix Editor
"""

import sys
import os
from random import (randint)
import signal
signal.signal(signal.SIGINT, signal.SIG_DFL)

from PyQt5.QtWidgets import (QMainWindow, QApplication, QWidget, QGridLayout, QPushButton, QSpinBox, QLabel, QAction, qApp, QSizePolicy, QColorDialog, QSpinBox, QInputDialog, QFileDialog, QMessageBox, QToolButton, QDialog, QComboBox)
from PyQt5.QtCore import *
from PyQt5.QtGui import (QColor, QImage, QPainter, QFont)
    
###################################
# Palette class
###################################
class Palette():
    def __init__(self, palette):
        ###################################
        # Pre-defined palettes
        ###################################
        self.Rainbow = [
            QColor(0xFF, 0x00, 0x00, 0xFF), QColor(0xD5, 0x2A, 0x00, 0xFF), QColor(0xAB, 0x55, 0x00, 0xFF), QColor(0xAB, 0x7F, 0x00, 0xFF),
            QColor(0xAB, 0xAB, 0x00, 0xFF), QColor(0x56, 0xD5, 0x00, 0xFF), QColor(0x00, 0xFF, 0x00, 0xFF), QColor(0x00, 0xD5, 0x2A, 0xFF),
            QColor(0x00, 0xAB, 0x55, 0xFF), QColor(0x00, 0x56, 0xAA, 0xFF), QColor(0x00, 0x00, 0xFF, 0xFF), QColor(0x2A, 0x00, 0xD5, 0xFF),
            QColor(0x55, 0x00, 0xAB, 0xFF), QColor(0x7F, 0x00, 0x81, 0xFF), QColor(0xAB, 0x00, 0x55, 0xFF), QColor(0xD5, 0x00, 0x2B, 0xFF) ]

        self.Party = [
            QColor(0xFF, 0x00, 0xAB, 0xFF), QColor(0x84, 0x00, 0x7C, 0xFF), QColor(0xB4, 0x00, 0x4B, 0xFF), QColor(0xE5, 0x00, 0x1B, 0xFF),
            QColor(0xE8, 0x17, 0x00, 0xFF), QColor(0xB8, 0x47, 0x00, 0xFF), QColor(0xAB, 0x77, 0x00, 0xFF), QColor(0xAB, 0xAB, 0x00, 0xFF),
            QColor(0x00, 0xAB, 0x55, 0xFF), QColor(0xDD, 0x22, 0x00, 0xFF), QColor(0xF2, 0x00, 0x0E, 0xFF), QColor(0xC2, 0x00, 0x3E, 0xFF),
            QColor(0x8F, 0x00, 0x71, 0xFF), QColor(0x56, 0x00, 0xA1, 0xFF), QColor(0x2F, 0x00, 0xD0, 0x00), QColor(0x00, 0x07, 0xF9, 0xFF) ]

        self.Heat = [
            QColor(0x00, 0x00, 0x00, 0xFF), QColor(0x33, 0x00, 0x00, 0xFF), QColor(0x66, 0x00, 0x00, 0xFF), QColor(0x99, 0x00, 0x00, 0xFF),
            QColor(0xCC, 0x00, 0x00, 0xFF), QColor(0xFF, 0x00, 0x00, 0xFF), QColor(0xFF, 0x33, 0x00, 0xFF), QColor(0xFF, 0x66, 0x00, 0xFF),
            QColor(0xFF, 0x99, 0x00, 0xFF), QColor(0xFF, 0xCC, 0x00, 0xFF), QColor(0xFF, 0xFF, 0x00, 0xFF), QColor(0xFF, 0xFF, 0x33, 0xFF),
            QColor(0xFF, 0xFF, 0x66, 0xFF), QColor(0xFF, 0xFF, 0x99, 0xFF), QColor(0xFF, 0xFF, 0xCC, 0xFF), QColor(0xFF, 0xFF, 0xFF, 0xFF) ]
        ### Currently selected palette information
        self.palette = self.Rainbow
        self.palettes = [ self.Rainbow, self.Party, self.Heat ]
        self.pnames = [ "Rainbow", "Party", "Heat" ]

        ### Color table
        self.colorTable = []
        self.setPalette(0)

    # Switch the palette
    def setPalette(self, palette):
        if (palette >= len(self.palettes)):
            print ("Unable to set palette, invalid palette #")
            return

        # Set the palette
        self.palette = self.palettes[palette]
        
        # Build the color table
        self.colorTable = []
        for i in range(0, 256):
            self.colorTable.append(self.color(i))

    # Get the color table index from a QColor
    def getColorIdx(self, color):
        idx = 0
        for i in self.colorTable:
            if (i == color):
                return idx
            idx = idx + 1
        return -1

    # Get a QColor from an index
    def getColor(self, idx):
        if (idx >= len(self.colorTable)):
            return None
        return self.colorTable[idx]

    # Get a color from a palette
    # Based on the algorithm in FastLED
    def color(self, index):
        hi4 = index >> 4
        lo4 = index & 0xF
        entry = self.palette[hi4]

        # Assign initial rgb values
        r = entry.getRgb()[0]
        g = entry.getRgb()[1]
        b = entry.getRgb()[2]

        if (lo4 != 0):
            if (hi4 == 15):
                entry = self.palette[0]
            else:
                entry = self.palette[hi4 + 1]

            f2 = lo4 << 4
            f1 = 255 - f2

            rp = entry.getRgb()[0]
            r = ((r * f1) >> 8) & 0xFF
            rp = ((rp * f2) >> 8) & 0xFF
            r = r + rp

            gp = entry.getRgb()[1]
            g = ((g * f1) >> 8) & 0xFF
            gp = ((gp * f2) >> 8) & 0xFF
            g = g + gp

            bp = entry.getRgb()[2]
            b = ((b * f1) >> 8) & 0xFF
            bp = ((bp * f2) >> 8) & 0xFF
            b = b + bp

        return QColor(r, g, b, 0xFF)

###################################
# Frame Class
###################################
### The underlying data store for a Frame is a QImage
class Frame(QImage):
    def __init__(self, columns, rows, palette):
        super(Frame, self).__init__(columns, rows, QImage.Format_RGB32)

        # Fill the QImage with black
        self.fill(QColor(0,0,0,255))

        # Get the palette
        self.palette = Palette(palette)

    # Set pixels from index and color index
    def setPixelIdx(self, idx, color_idx):
        r, c = self.P2C(idx)
        color = QColor(0, 0, 0, 255)
        if ((color_idx >= 0) and (color_idx < 256)):
            color = self.palette.getColor(color_idx)

        super(Frame, self).setPixel(c, r, color.rgb())

    # Set pixels using the row, column and color index
    def setPixel(self, c, r, color_idx):
        color = QColor(0, 0, 0, 255)
        if ((color_idx >= 0) and (color_idx < 256)):
            color = self.palette.getColor(color_idx)

        super(Frame, self).setPixel(c, r, color.rgb())

    # Get color from an indexed pixel
    def getPixelIdx(self, idx):
        if (idx >= 93):
            return QColor(0, 0, 0, 255)

        r, c = self.P2C(idx)
        return QColor(super(Frame, self).pixel(c, r))

    # Get paletted color from an indexed pixel
    def getPalPixelIdx(self, idx):
        if (idx >= 93):
            return -1

        r, c = self.P2C(idx)
        color = QColor(super(Frame, self).pixel(c, r))

        return self.palette.getColorIdx(color)


    # Get a row and column from a pixel #
    def P2C(self, p):
        pixel_tbl = [
            0x00, 0x10, 0x20, 0x30, 0x40, 0x50, 0x60, 0x70,
            0x80, 0x81, 0x71, 0x61, 0x51, 0x41, 0x31, 0x21,
            0x11, 0x01, 0x02, 0x12, 0x22, 0x32, 0x42, 0x52,
            0x62, 0x72, 0x82, 0x73, 0x63, 0x53, 0x43, 0x33,
            0x23, 0x13, 0x24, 0x34, 0x44, 0x54, 0x64, 0x55,
            0x45, 0x35, 0x36, 0x46, 0x56, 0x57, 0x47, 0x37,
            0x38, 0x48, 0x58, 0x59, 0x49, 0x39, 0x2A, 0x3A,
            0x4A, 0x5A, 0x6A, 0x7B, 0x6B, 0x5B, 0x4B, 0x3B,
            0x2B, 0x1B, 0x0C, 0x1C, 0x2C, 0x3C, 0x4C, 0x5C,
            0x6C, 0x7C, 0x8C, 0x8D, 0x7D, 0x6D, 0x5D, 0x4D,
            0x3D, 0x2D, 0x1D, 0x0D, 0x0E, 0x1E, 0x2E, 0x3E,
            0x4E, 0x5E, 0x6E, 0x7E, 0x8E
        ]

        idx = pixel_tbl[p]
        return ((idx >> 4) & 0xF), (idx & 0xF)

    # Get a pixel # from row and column
    def C2P(self, r, c):
        # Temporary table for decoding from row and column to pixel
        rc_tbl = [
            [ 0, 17, 18, 255, 255, 255, 255, 255, 255, 255, 255, 255, 66, 83, 84 ],
            [ 1, 16, 19, 33, 255, 255, 255, 255, 255, 255, 255, 65, 67, 82, 85 ],
            [ 2, 15, 20, 32, 34, 255, 255, 255, 255, 255, 54, 64, 68, 81, 86 ],
    	    [ 3, 14, 21, 31, 35, 41, 42, 47, 48, 53, 55, 63, 69, 80, 87 ],
	    [ 4, 13, 22, 30, 36, 40, 43, 46, 49, 52, 56, 62, 70, 79, 88 ],
	    [ 5, 12, 23, 29, 37, 39, 44, 45, 50, 51, 57, 61, 71, 78, 89 ],
	    [ 6, 11, 24, 28, 38, 255, 255, 255, 255, 255, 58, 60, 72, 77, 90 ],
	    [ 7, 10, 25, 27, 255, 255, 255, 255, 255, 255, 255, 59, 73, 76, 91 ],
	    [ 8, 9, 26, 255, 255, 255, 255, 255, 255, 255, 255, 255, 74, 75, 92 ] ]

        return rc_tbl[r][c];
    
### The script class for generating frames programatically
class Script():
    def __init__(self, fn, r, c):
        # Size of the area -> scripts should be written for any size
        self.columns = c
        self.rows = r

        # Awful idea, but it does work...
        l_vars = dict()
        with open(fn) as f:
            ### Append some boilerplate code (?)
            scr = "from PyQt5.QtGui import (QColor)\n"
            scr = scr + "from random import (randint)\n"

            scr = scr + f.read()
            code = compile(scr, fn, 'exec')
            exec(code, globals(), l_vars)

        # Imported Script functions to call
        self.script = l_vars['script']

        # Number of frames in the script
        self.frames = l_vars['frameCount'](r, c)

        # Is the animation done rendering?
        self.done = False

    # Report if we're done
    def isDone(self):
        return self.done

    def render(self, idx):
        # Reset the render status
        if (idx == 0):
            self.done = False

        print("Generating frame: ", str(idx))
        frame = Frame(self.c, self.r, self.palette)

        # Using the frame #, render the frame
        self.script(frame, idx)

        if ((not (self.frames == 0)) and (idx == self.frames - 1)):
            self.done = True
        
        return frame

### The widget for the button matrix
class QMatrix(QWidget):
    def __init__(self, parent = None):
        super(QMatrix, self).__init__(parent)
    
        self.c = 15
        self.r = 9
        self.ct = 93
        self.frame = 0
        self.fps = 30
        self.mode = "Operate"
        self.buttons = []
        self.paletteIdx = 0
        self.color = 0

        # Create the new Frame
        self.frames = []
        # Script for generating frames
        self.script = None
        # Matrix grid layout
        self.grid = QGridLayout()

        # Set the layout
        self.setLayout(self.grid)

    ### Load an animation
    def loadAnimation(self, fn):
        data = [] 

        # Reset the grid
        self.regen()
        
        # Get the file type
        fx, ext = os.path.splitext(fn)        
        if (ext == ".h"):
            b = open(fn, 'r')

            # Read until we find a line with {
            done = False
            while (not done):
                line = b.readline()
                if (line == None):
                    done = True
                # Found it!
                if (line.find("{") != -1):
                    data = []

                    while (line != None):
                        sline = line.strip(" \n\r{}")
                        sline = sline.replace(",", " ")
                        s = sline.split()
                        if (s != None):
                            data = data + s
                        
                        line = b.readline()
                        if (line.find("}") != -1):
                            done = True
                            break
            b.close()
            data = [ int(i,0) for i in data ]

        # Binary version
        elif (ext == ".bin"):
            b = open(fn, 'rb')
            data = b.read()
            b.close()

        frame_ct = data[0]
        self.fps = data[1]
        self.parent().parent().updateFPS(self.fps)
        self.paletteIdx = data[2]

        # Ignore the offsets, we don't need them
        pos =frame_ct * 2 + 3
        for i in range(0, frame_ct):
            # Read in the frame size
            sz = data[pos]
            pos = pos + 1

            # Read in the frame
            for j in range(0, int(sz)):
                pixel = data[pos]
                pos = pos + 1
                color = data[pos]
                pos = pos + 1
                
                # If the pixel is a command, load the command
                if (pixel & 0xF0 == 0xF0):
                    pass

                # Otherwise, set the pixel
                self.frames[i].setPixelIdx(pixel, c)

            # Add the next frame
            if (i != frame_ct - 1):
                self.frames.append(Frame(self.c, self.r, self.paletteIdx))

        # Set the frame number to the first one
        self.frame = 0

        # Update the frame index
        self.parent().parent().updateFrameIndex(self.frame, len(self.frames))

        # Now update the loaded buttons
        self.updateMatrix()

    ### Save an animation
    def saveAnimation(self, fn):
        # Generate the header
        header = []
        header.append(len(self.frames))
        header.append(int(self.fps))
        header.append(int(self.paletteIdx))

        # Frame data
        fr = []

        # Frame offsets
        base = len(self.frames) * 2 + 3
        frame_offsets = []

        # Get the frame data
        for f in self.frames:
            fdata = []
            frame_offsets.append(base)
            for idx in range(0, self.ct):
                color = f.getPixelIdx(idx)
                if (color.name() != "#000000"):
                    color_idx = f.palette.getColorIdx(color)
                    fdata.append(idx)
                    fdata.append(color_idx)
            # If there's no data, append the blackout command
            if (len(fdata) == 0):
                fdata.append(255)
                fdata.append(0)
            fdata.insert(0, int(len(fdata)/2))
            fr.append(fdata)
            base = base + len(fdata)

        # Write out the data
        fx, ext = os.path.splitext(fn)        
        if (ext == ".h"):
            b = open(fn, 'w')
            if (b == None):
                print ("Unable to open the file " + fn + " for writing!")
                return
            
            b.write("{\n")
            ct = 0
            # Write the header
            b.write(hex(header[0]))
            b.write(", ")
            b.write(hex(header[1]))
            b.write(", ")
            b.write(hex(header[2]))
            b.write(",\n")

            # Write out the offset data
            for f in frame_offsets:
                b.write(hex((f & 0xFF) >> 8))
                b.write(", ")
                b.write(hex(f & 0xFF))
                b.write(", ")
            b.write("\n");

            # Write out the frame data
            for f in fr:
                for i in range(0, len(f)):
                    b.write(hex(f[i]))
                    if (i != (len(f) - 1)):
                        b.write(', ')
                if (f != fr[-1]):
                    b.write(',')
                b.write("\n")
            b.write("};\n")
            b.close() 

        # Write out the binary data
        elif (ext == ".bin"):
            b = open(fn, 'wb')
            if (b == None):
                print ("Unable to open the file " + fn + " for writing!")
                return
            bd = bytes(header)
            b.write(bd)
            
            # Write out the offset data
            for f in frame_offsets:
                od = ((f >> 8) & 0xFF, f & 0xFF)
                b.write(bytes(od))

            # Write out the frame data
            for f in fr:
                b.write(bytes(f))

            b.close()

    ### Delete all frames
    def deleteAllFrames(self):
        self.frames = []
        self.frames.append(Frame(self.c, self.r, self.paletteIdx))
        self.frame = 0
        self.paletteIdx = 0
        self.color = 0

    ### Regenerate the array with the current parameters
    def regen(self):
        # Delete old push buttons
        for p in self.buttons:
            p.hide()
            p.deleteLater()
        self.buttons = []

        # Reset the script
        self.script = None

        # Delete all of the frames
        self.deleteAllFrames()
        
        # Update the frame index
        self.parent().parent().updateFrameIndex(self.frame, len(self.frames))
            
        # Size policy for the buttons
        sp = QSizePolicy(QSizePolicy.Preferred, QSizePolicy.Preferred)
        sp.setHorizontalStretch(True)
        sp.setVerticalStretch(True)
        sp.setHeightForWidth(True)

        for px in range(0, self.ct):
           r, c = self.frames[self.frame].P2C(px)
           p = QToolButton()
           p.setObjectName(str(px))
           self.grid.addWidget(p, r, c, 1, 1)
           self.buttons.append(p)
            
           self.setVisible(True)
           self.setEnabled(True)

        # Apply the policies and styles for the buttons
        for p in self.buttons:
            p.clicked.connect(lambda: self.push())
            p.setStyleSheet('border: 0px; background-color: black; color: black')
            p.setMinimumWidth(25)
            p.setMinimumHeight(25)
            p.setSizePolicy(sp)

    ### Behavior when pressing a matrix button
    def push(self):
        pb = self.sender()
        pbNum = int(pb.objectName())
        ### Set the color
        if (self.frames[self.frame].getPalPixelIdx(pbNum) != self.color):
            self.frames[self.frame].setPixelIdx(pbNum, self.color)
            color = self.frames[self.frame].palette.getColor(self.color)
        else:
            color = QColor(0,0,0,255)
            self.frames[self.frame].setPixelIdx(pbNum, -1)
        
        pb.setStyleSheet('border: 0px; background-color: ' + color.name() + '; color: ' + color.name())

    ### Move to the next frame
    def frameUp(self):
        # If we're not using a script, it's being handled manually
        # If we're done rendering the frames, don't re-render
        if ((self.script == None) or (self.script.isDone())):
            self.frame = self.frame + 1

            if (self.frame >= len(self.frames)):
                self.frame = 0
        
        # If we are using a script, generate the frame
        else:
            self.frame = self.frame + 1
            self.frames.append(self.script.render(self.frame))

        # Update the frame index
        self.parent().parent().updateFrameIndex(self.frame, len(self.frames))

        # Now update the loaded buttons
        self.updateMatrix()

    ### Move to the next frame
    def frameAdd(self):
        # Add the frame
        self.frames.append(Frame(self.c, self.r, self.paletteIdx))

        # Set the frame to the new frame
        self.frame = len(self.frames) - 1

        # Update the frame index
        self.parent().parent().updateFrameIndex(self.frame, len(self.frames))

        # Now update the loaded buttons
        self.updateMatrix()

    ### Move to the previous frame
    def frameDown(self):
        self.frame = self.frame - 1

        # If we're below 0, loop back to the last frame
        if (self.frame < 0):
            self.frame = len(self.frames) - 1

        # Update the frame index
        self.parent().parent().updateFrameIndex(self.frame, len(self.frames))

        # Now update the loaded buttons
        self.updateMatrix()

    ### Update the button matrix from the currently loaded frame
    def updateMatrix(self):
        for idx in range(0, len(self.buttons)):
            pb = self.buttons[idx]
            color = self.frames[self.frame].getPixelIdx(idx)
            pb.setStyleSheet('border: 0px; background-color: ' + color.name() + '; color: ' + color.name())

    ### Blit a QImage to the current frame
    def blit(self, qmg):
        dest = QPoint(0, 0)
        qp = QPainter(self.frames[self.frame])
        qp.drawImage(dest, qmg)
        qp.end()

        # Update the loaded buttons
        self.updateMatrix()

    ### Save a frame as an image file
    def saveFrame(self, fn):
        if (not self.frames[self.frame].save(fn)):
            msg = QMessageBox()
            msg.setIcon(QMessageBox.Warning)
            msg.setText("Unable to save the frame!")
            msg.setStandardButtons(QMessageBox.Ok)
            msg.exec_()
    
    ### Set the script
    def setScript(self, scr):
        self.script = Script(scr, self.c, self.r)

        # Generate frame 0
        self.frame = 0
        self.frames = [ self.script.render(0) ]

        # Update the loaded buttons
        self.updateMatrix()

    ### Matrix Export active pixel list
    def exportActive(self):
        print ("FIXME")
        pass

class PalettePicker(QDialog):
    def __init__(self, parent=None, paletteIdx=0, color=0):
        QDialog.__init__(self, parent)
        
        # Create a new palette object
        self.paletteObj = Palette(paletteIdx)
        
        self.setWindowTitle("Select Palette Colors")
        layout = QGridLayout()

        self.picker = QComboBox()
        self.picker.addItems(self.paletteObj.pnames)
        layout.addWidget(self.picker, 0, 0, 1, 8)

        self.pickerDo = QPushButton("Load Palette")
        self.pickerDo.clicked.connect(self.doPalette)
        layout.addWidget(self.pickerDo, 0, 8, 1, 8)

        self.label = QLabel("Click a color to select it for painting")
        layout.addWidget(self.label, 1, 0, 1, 16)

        self.labels = []
        self.buttons = []

        ct = 0
        for r in range(0,16):
            for c in range(0, 16):
                b = QPushButton()
                b.setObjectName(str(ct))
                self.buttons.append(b) 
                pc = self.paletteObj.getColor(ct).name()
                if (ct == color):
                    b.setStyleSheet('border: 2px solid black; background-color: ' + pc + '; color: ' + pc)
                else:
                    b.setStyleSheet('border: 0px; background-color: ' + pc + '; color: ' + pc)
                sp = QSizePolicy(QSizePolicy.Preferred, QSizePolicy.Preferred)
                sp.setHorizontalStretch(True)
                sp.setVerticalStretch(True)
                sp.setHeightForWidth(True)
                b.setSizePolicy(sp)
                b.setMinimumWidth(5)
                b.setMinimumHeight(15)
                b.clicked.connect(self.doSelect)
                layout.addWidget(b, r + 2, c)
                ct = ct + 1

        self.done = QPushButton("Done")
        self.done.clicked.connect(self.doDone)
        layout.addWidget(self.done, 19, 13, 1, 3)
        self.setLayout(layout)

        self.color = color
        self.paletteIdx = paletteIdx

    def doSelect(self):
        pb = self.sender()
        pbNum = int(pb.objectName())
            
        # Turn off the border color
        pc = self.paletteObj.getColor(self.color).name()
        self.buttons[self.color].setStyleSheet('border: 0px; background-color: ' + pc + '; color: ' + pc)

        # Turn on the border color
        self.color = pbNum
        pc = self.paletteObj.getColor(self.color).name()
        self.buttons[self.color].setStyleSheet('border: 2px solid black; background-color: ' + pc + '; color: ' + pc)

    def doPalette(self):
        p = self.picker.currentIndex()
        self.paletteIdx = p
        self.paletteObj.setPalette(p)
        for ct in range(0, len(self.buttons)):
            pc = self.paletteObj.getColor(ct).name()
            self.buttons[ct].setStyleSheet('border: 0px; background-color: ' + pc + '; color: ' + pc)

    def doDone(self):
        self.close()

class BowtieEd(QMainWindow):
    def __init__(self):
        super(QMainWindow, self).__init__()
        
        #############
        # Main Widget
        #############
        self.qw = QWidget()
        self.mainLayout = QGridLayout()
        
        # Build the box first so that we can set signals
        self.matrix = QMatrix()
        self.mainLayout.addWidget(self.matrix, 1, 0, 1, 4)

        # Play button and time between frames
        self.PlayButton = QPushButton("Play")
        self.PlayButton.clicked.connect(self.playBtn)
        self.mainLayout.addWidget(self.PlayButton, 0, 0, 1, 2)
        self.TimerBox = QSpinBox()
        self.TimerBox.setValue(5)
        self.TimerBox.setSingleStep(1)
        self.TimerBox.valueChanged.connect(self.updateTimerTickrate)
        self.mainLayout.addWidget(self.TimerBox, 0, 2)
        self.TimerBoxLabel = QLabel("FPS")
        self.mainLayout.addWidget(self.TimerBoxLabel, 0, 3)

        # Build the timer object
        self.Timer = QTimer()
        self.Timer.timeout.connect(self.timerTick)

        # Frame Left Button
        self.FrameLeft = QPushButton("<")
        self.FrameLeft.clicked.connect(self.matrix.frameDown)
        self.mainLayout.addWidget(self.FrameLeft, 2, 0)

        # Frame Index
        self.FrameIdx = QLabel("Frame: 0001 of 0001")
        self.monoFont = QFont("Monospace")
        self.monoFont.setStyleHint(QFont.TypeWriter)
        self.FrameIdx.setFont(self.monoFont)
        self.mainLayout.addWidget(self.FrameIdx, 2, 1)

        # Frame Right Button
        self.FrameRight = QPushButton(">")
        self.FrameRight.clicked.connect(self.matrix.frameUp)
        self.mainLayout.addWidget(self.FrameRight, 2, 2)
        
        # Add Frame
        self.FrameAdd = QPushButton(">+")
        self.FrameAdd.clicked.connect(self.matrix.frameAdd)
        self.mainLayout.addWidget(self.FrameAdd, 2, 3)

        ##############
        # Top menu bar
        ##############
        self.menubar = self.menuBar()

        # File Menu
        self.newAction = QAction('&New', self)
        self.newAction.triggered.connect(self.matrix.regen)

        self.saveAction = QAction('&Save ...', self)
        self.saveAction.triggered.connect(self.saveAnimation)
        
        self.loadAction = QAction('&Load ...', self)
        self.loadAction.triggered.connect(self.loadAnimation)

        self.exportArrayAction = QAction('Export active pixel array ...', self)
        self.exportArrayAction.triggered.connect(self.exportArray)
        
        self.loadScriptAction = QAction('Load Script ...', self)
        self.loadScriptAction.triggered.connect(self.pickScript)

        self.exitAction = QAction('&Exit', self)
        self.exitAction.setShortcut('Ctrl+Q')
        self.exitAction.triggered.connect(qApp.quit)

        self.fileMenu = self.menubar.addMenu('&File')
        self.fileMenu.addAction(self.newAction)
        self.fileMenu.addAction(self.saveAction)
        self.fileMenu.addAction(self.loadAction)
        self.fileMenu.addAction(self.exportArrayAction)
        #self.fileMenu.addAction(self.loadScriptAction)
        self.fileMenu.addAction(self.exitAction)
        
        # Color Menu
        self.colorAction = QAction('Select Color', self)
        self.colorAction.triggered.connect(self.PickColorPalette)

        self.colorMenu = self.menubar.addMenu('Color')
        self.colorMenu.addAction(self.colorAction)

        # Content Menu
        self.importAction = QAction('Import Image as Current Frame', self)
        self.importAction.triggered.connect(self.ImportFrame)
        self.exportAction = QAction('Export Current Frame as Image', self)
        self.exportAction.triggered.connect(self.ExportFrame)

        self.contentMenu = self.menubar.addMenu('&Content')
        self.contentMenu.addAction(self.importAction)
        self.contentMenu.addAction(self.exportAction)

        # Help Menu
        self.helpAction = QAction('&Help', self)
        self.aboutAction = QAction('&About', self)

        self.helpMenu = self.menubar.addMenu('&Help')

        self.helpMenu.addAction(self.helpAction)
        self.helpMenu.addAction(self.aboutAction)

        #####################
        # Set the main layout
        #####################
        self.qw.setLayout(self.mainLayout)
        self.setCentralWidget(self.qw)
        
        # Set the tile
        self.setWindowTitle('BowtieEd')
        
        # Generate the initial grid
        self.matrix.regen()

        # Show the window
        self.show()
    
    ########################
    # Update the frame index
    ########################
    def updateFrameIndex(self, idx, total):
        self.FrameIdx.setText("Frame: " + str(idx + 1).zfill(4) + " of " + str(total).zfill(4))
    
    ######################
    # Update the fps value
    ######################
    def updateFPS(self, fps):
        self.TimerBox.setValue(fps)

    ###############################
    # Start/stop the playback timer
    ###############################
    def playBtn(self):
        if (self.PlayButton.text() == "Play"):
            # Start the timer
            if (self.TimerBox.value() == 0):
                self.Timer.start(1000) 
            else:
                self.Timer.start((1 / self.TimerBox.value()) * 1000)
            
            # Set the name of the button to pause
            self.PlayButton.setText("Pause")
        else:
            # Stop the timer
            self.Timer.stop()

            # Update the button text
            self.PlayButton.setText("Play")
    
    #################################
    # Callback for the playback timer
    #################################
    def timerTick(self):
        # Move to the next frame 
        self.matrix.frameUp()

    ##########################################################
    # Callback for the playback timer's tickrate being changed
    ##########################################################
    def updateTimerTickrate(self):
        self.matrix.FPS = self.TimerBox.value()

        # If the timer is running, change it
        if (self.Timer.isActive):
            if (self.TimerBox.value() == 0):
                self.Timer.setInterval(1000) 
            else:
                self.Timer.setInterval((1 / self.TimerBox.value()) * 1000)

    ##########################################################
    # Dialog for picking palette colors
    ##########################################################
    def PickColorPalette(self):
        pp = PalettePicker(self)
        pp.exec_()
        self.matrix.palette = pp.palette
        self.matrix.color = pp.color
        self.matrix.updateMatrix()
    
    ##########################################################
    # Export Array of Pixels for use in Arduino
    ##########################################################
    def exportArray(self):
        fn, fm = QFileDialog.getSaveFileName(self, 'Save list of active (not black/off) pixels ...', None, "C Header (*.h);;All Files (*)")
        if (fn != None):
            self.matrix.exportActive()
    
    ##########################################################
    # Dialog for loading an animation
    ##########################################################
    def loadAnimation(self):
        fn, fm = QFileDialog.getOpenFileName(self, 'Load animation ...', None, "Header File (*.h);;Binary File (*.bin);;All Files (*)")  
        if (fn != None):
            self.matrix.loadAnimation(fn)

    ##########################################################
    # Dialog for saving an animation
    ##########################################################
    def saveAnimation(self):
        fn, fm = QFileDialog.getSaveFileName(self, 'Save animation ...', None, "Header File (*.h);;Binary File (*.bin);;All Files (*)")
        fx, ext = os.path.splitext(fn)        
        if (ext == ""):
            if (fm == "Header File (*.h)"):
                fn = fn + ".h"
            else:
                fn = fn + ".bin"
        if (fn != None):
            self.matrix.saveAnimation(fn)

    ##########################################################
    # Dialog for importing a frame
    ##########################################################
    def ImportFrame(self):
        fn, fm = QFileDialog.getOpenFileName(self, 'Open frame...', None, "Images (*.bmp *.gif *.jpg *.jpeg *.png);;All Files (*)")  
        if (fn != None):
            print (fn)
            img = QImage(fn)
            if (img != None):
                self.matrix.blit(img)

    ##########################################################
    # Dialog for exporting a frame
    ##########################################################
    def ExportFrame(self):
        fn, fm = QFileDialog.getSaveFileName(self, 'Save as...', None, "Images (*.bmp *.jpg *.jpeg *.png);;All Files (*)")
        if (fn != None):
            self.matrix.saveFrame(fn)
    
    ##########################################################
    # Dialog for picking a script
    ##########################################################
    def pickScript(self):
        fn, fm = QFileDialog.getOpenFileName(self, 'Load Script...', 'Scripts', "Scripts (*.scr);;All Files (*)")
        if (fn != None):
           self.matrix.setScript(fn)
    
    #####################
    # Key Press Handler
    #####################
    def keyPressEvent(self, e):
        if (e.key() == Qt.Key_Escape):
            self.close()
        if (e.key() == Qt.Key_Greater):
            self.matrix.frameUp()
        if (e.key() == Qt.Key_Less):
            self.matrix.frameDown()

if __name__ == '__main__':
    app = QApplication(sys.argv)
    prog = BowtieEd()
    sys.exit(app.exec_())
